"use client";

import { useEffect, useState } from "react";
import { ethers } from "ethers";
import {
  CONTRACT_ADDRESS,
  CONTRACT_ABI as ElectionABI,
} from "../../Utils/contractConfig";

export default function ChangePhasePage() {
  // ABI is imported from Utils/contractConfig (static)
  const ElectionABIState: any = ElectionABI || null;
  const [currentAccount, setCurrentAccount] = useState("");
  const [currentPhase, setCurrentPhase] = useState<number | null>(null);
  const [isOwner, setIsOwner] = useState(false);
  const [contract, setContract] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [mounted, setMounted] = useState(false);

  // Prevent hydration mismatch
  useEffect(() => {
    setMounted(true);
  }, []);

  // No remote ABI fetch - we use the ABI bundled in Utils/contractConfig

  // ==========================
  // 2Ô∏è‚É£ K·∫øt n·ªëi MetaMask sau khi c√≥ ABI
  // ==========================
  useEffect(() => {
    if (!ElectionABIState || !mounted) return;
    connectWallet();
  }, [ElectionABIState, mounted]);

  async function connectWallet() {
    if (!window.ethereum) {
      setError("Vui l√≤ng c√†i MetaMask!");
      return;
    }

    if (!CONTRACT_ADDRESS) {
      setError(
        "Vui l√≤ng c·∫•u h√¨nh h·ª£p l·ªá cho contract trong Utils/contractConfig.js"
      );
      return;
    }

    try {
      setLoading(true);
      setError("");

      const provider = new ethers.BrowserProvider(window.ethereum);
      const accounts = await provider.send("eth_requestAccounts", []);
      const signer = await provider.getSigner();

      const contractInstance = new ethers.Contract(
        CONTRACT_ADDRESS,
        ElectionABIState,
        signer
      );

      setContract(contractInstance);
      setCurrentAccount(accounts[0]);

      // Ki·ªÉm tra owner v·ªõi error handling
      try {
        const owner = await contractInstance.owner();
        console.log("üìå Contract owner:", owner);
        console.log("üë§ Current account:", accounts[0]);
        setIsOwner(owner.toLowerCase() === accounts[0].toLowerCase());
      } catch (ownerError: any) {
        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra owner:", ownerError);
        setIsOwner(false); // Assume not owner if check fails
        // Continue anyway
      }

      const phase = await contractInstance.currentPhase();
      setCurrentPhase(Number(phase));

      setLoading(false);
    } catch (error: any) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi MetaMask:", error);
      setError(`L·ªói k·∫øt n·ªëi: ${error.message}`);
      setLoading(false);
    }
  }

  // ==========================
  // 3Ô∏è‚É£ L·∫Øng nghe s·ª± ki·ªán MetaMask
  // ==========================
  useEffect(() => {
    if (!window.ethereum) return;

    const handleAccountsChanged = (accounts: string[]) => {
      if (accounts.length > 0) {
        connectWallet();
      } else {
        setCurrentAccount("");
        setContract(null);
        setIsOwner(false);
        setCurrentPhase(null);
      }
    };

    const handleChainChanged = () => {
      window.location.reload();
    };

    window.ethereum.on("accountsChanged", handleAccountsChanged);
    window.ethereum.on("chainChanged", handleChainChanged);

    return () => {
      window.ethereum.removeListener("accountsChanged", handleAccountsChanged);
      window.ethereum.removeListener("chainChanged", handleChainChanged);
    };
  }, [ElectionABI]);

  // ==========================
  // 4Ô∏è‚É£ Chuy·ªÉn Phase
  // ==========================
  async function changePhase(newPhase: number) {
    if (!contract) {
      setError("Contract ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
      return;
    }

    try {
      setLoading(true);
      setError("");

      const tx = await contract.setPhase(newPhase);
      await tx.wait();

      alert("‚úÖ ƒê√£ chuy·ªÉn giai ƒëo·∫°n th√†nh c√¥ng!");

      const updated = await contract.currentPhase();
      setCurrentPhase(Number(updated));

      setLoading(false);
    } catch (err: any) {
      console.error("‚ùå L·ªói chuy·ªÉn phase:", err);
      const errorMsg = err.reason || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      setError(`L·ªói khi chuy·ªÉn phase: ${errorMsg}`);
      setLoading(false);
    }
  }

  // ==========================
  // üî• Reset to√†n b·ªô cu·ªôc b·∫ßu c·ª≠
  // ==========================
  async function handleEmergencyFullReset() {
    if (!contract) {
      setError("Contract ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
      return;
    }

    const confirmMsg = `‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n ch·∫Øc ch·∫Øn mu·ªën RESET TO√ÄN B·ªò cu·ªôc b·∫ßu c·ª≠?

H√†nh ƒë·ªông n√†y s·∫Ω:
‚úñ X√≥a t·∫•t c·∫£ ·ª©ng vi√™n
‚úñ X√≥a t·∫•t c·∫£ c·ª≠ tri ƒë√£ ƒëƒÉng k√Ω
‚úñ X√≥a t·∫•t c·∫£ phi·∫øu b·∫ßu
‚úñ ƒê·∫∑t l·∫°i phase v·ªÅ ƒêƒÉng k√Ω (0)

KH√îNG TH·ªÇ HO√ÄN T√ÅC!`;

    if (!confirm(confirmMsg)) {
      return;
    }

    // Double confirmation
    if (
      !confirm(
        "‚ö†Ô∏è X√°c nh·∫≠n l·∫ßn cu·ªëi: B·∫°n c√≥ CH·∫ÆC CH·∫ÆN mu·ªën reset to√†n b·ªô kh√¥ng?"
      )
    ) {
      return;
    }

    try {
      setLoading(true);
      setError("");

      console.log("üî• ƒêang g·ªçi emergencyFullReset...");
      const tx = await contract.emergencyFullReset();

      console.log("üìù TX hash:", tx.hash);
      alert("‚è≥ ƒêang x·ª≠ l√Ω giao d·ªãch... Vui l√≤ng ch·ªù confirmation.");

      await tx.wait();

      alert(
        "‚úÖ ƒê√£ reset to√†n b·ªô cu·ªôc b·∫ßu c·ª≠ th√†nh c√¥ng!\n\nüîÑ Trang s·∫Ω t·ª± ƒë·ªông t·∫£i l·∫°i..."
      );

      // Reload data
      const phase = await contract.currentPhase();
      setCurrentPhase(Number(phase));

      setLoading(false);

      // Reload page after 2 seconds
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (err: any) {
      console.error("‚ùå L·ªói reset:", err);
      const errorMsg = err.reason || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      setError(`L·ªói khi reset: ${errorMsg}`);
      setLoading(false);
    }
  }

  // ==========================
  // 5Ô∏è‚É£ UI hi·ªÉn th·ªã
  // ==========================
  const phaseNames = ["ƒêƒÉng k√Ω", "B·∫ßu c·ª≠", "K·∫øt th√∫c b·∫ßu c·ª≠"];
  const phaseColors = [
    "bg-blue-100 text-blue-800",
    "bg-yellow-100 text-yellow-800",
    "bg-green-100 text-green-800",
  ];

  // Prevent hydration mismatch
  if (!mounted) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
          <p className="mt-4 text-gray-600">ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4 w-4/5">
      <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full">
        <h1 className="text-3xl font-bold mb-6 text-center text-indigo-600">
          üïπÔ∏è Qu·∫£n l√Ω giai ƒëo·∫°n b·∫ßu c·ª≠
        </h1>

        {/* Loading ABI */}
        {!ElectionABI && !error && (
          <div className="text-center py-8">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
            <p className="mt-4 text-gray-600">ƒêang t·∫£i ABI t·ª´ backend...</p>
          </div>
        )}

        {/* Error Display */}
        {error && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded">
            <p className="font-bold">‚ö†Ô∏è L·ªói</p>
            <p>{error}</p>
          </div>
        )}

        {/* Main Content */}
        {ElectionABI && !error && (
          <>
            {/* Th√¥ng tin t√†i kho·∫£n */}
            <div className="bg-gray-50 rounded-lg p-4 mb-6 space-y-3">
              <div>
                <span className="text-sm text-gray-600">
                  T√†i kho·∫£n hi·ªán t·∫°i:
                </span>
                <p className="font-mono text-sm break-all">
                  {currentAccount || "Ch∆∞a k·∫øt n·ªëi"}
                </p>
              </div>

              <div>
                <span className="text-sm text-gray-600">
                  Giai ƒëo·∫°n hi·ªán t·∫°i:
                </span>
                {currentPhase !== null ? (
                  <div
                    className={`inline-block px-3 py-1 rounded-full text-sm font-semibold ml-2 ${phaseColors[currentPhase]}`}
                  >
                    {phaseNames[currentPhase]}
                  </div>
                ) : (
                  <span className="ml-2 text-gray-500">ƒêang t·∫£i...</span>
                )}
              </div>

              <div>
                <span className="text-sm text-gray-600">Quy·ªÅn Admin:</span>
                <span
                  className={`ml-2 font-semibold ${
                    isOwner ? "text-green-600" : "text-red-600"
                  }`}
                >
                  {isOwner ? "‚úì C√≥ quy·ªÅn" : "‚úó Kh√¥ng c√≥ quy·ªÅn"}
                </span>
              </div>

              <div>
                <span className="text-sm text-gray-600">Contract:</span>
                <p className="font-mono text-xs break-all text-gray-500">
                  {CONTRACT_ADDRESS}
                </p>
              </div>
            </div>

            {/* Loading Indicator */}
            {loading && (
              <div className="text-center mb-4">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
                <p className="mt-2 text-gray-600">ƒêang x·ª≠ l√Ω giao d·ªãch...</p>
              </div>
            )}

            {/* N√∫t k·∫øt n·ªëi n·∫øu ch∆∞a connect */}
            {!currentAccount && (
              <button
                onClick={connectWallet}
                disabled={loading}
                className="w-full bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
              >
                K·∫øt n·ªëi MetaMask
              </button>
            )}

            {/* Th√¥ng b√°o kh√¥ng ph·∫£i owner */}
            {currentAccount && !isOwner && (
              <div className="text-center">
                <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded">
                  <p className="text-yellow-800 font-semibold">
                    ‚ö†Ô∏è Ch·ªâ ch·ªß s·ªü h·ªØu (Admin) m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi giai ƒëo·∫°n!
                  </p>
                </div>
              </div>
            )}

            {/* N√∫t chuy·ªÉn phase */}
            {currentAccount && isOwner && currentPhase !== null && (
              <div className="space-y-3">
                {currentPhase === 0 && (
                  <button
                    onClick={() => changePhase(1)}
                    disabled={loading}
                    className="w-full bg-yellow-500 text-white px-6 py-3 rounded-lg hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
                  >
                    ‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu B·∫ßu C·ª≠
                  </button>
                )}

                {currentPhase === 1 && (
                  <button
                    onClick={() => changePhase(2)}
                    disabled={loading}
                    className="w-full bg-red-500 text-white px-6 py-3 rounded-lg hover:bg-red-600 transition disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
                  >
                    ‚èπÔ∏è K·∫øt Th√∫c B·∫ßu C·ª≠
                  </button>
                )}

                {currentPhase === 2 && (
                  <button
                    onClick={() => changePhase(0)}
                    disabled={loading}
                    className="w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
                  >
                    üîÑ Reset v·ªÅ Giai ƒêo·∫°n ƒêƒÉng K√Ω
                  </button>
                )}

                {/* üî• N√∫t Emergency Reset - Danger Zone */}
                <div className="mt-6 pt-6 border-t-2 border-red-200">
                  <div className="bg-red-50 border-2 border-red-300 rounded-lg p-4">
                    <h3 className="text-lg font-bold text-red-700 mb-2 flex items-center gap-2">
                      <span>‚ö†Ô∏è</span> DANGER ZONE
                    </h3>
                    <p className="text-sm text-red-600 mb-3">
                      Reset to√†n b·ªô cu·ªôc b·∫ßu c·ª≠ v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu. X√≥a t·∫•t
                      c·∫£ ·ª©ng vi√™n, c·ª≠ tri v√† phi·∫øu b·∫ßu.
                      <strong className="block mt-1">
                        KH√îNG TH·ªÇ HO√ÄN T√ÅC!
                      </strong>
                    </p>
                    <button
                      onClick={handleEmergencyFullReset}
                      disabled={loading}
                      className="w-full bg-red-700 text-white px-6 py-3 rounded-lg hover:bg-red-800 transition disabled:opacity-50 disabled:cursor-not-allowed font-bold border-2 border-red-900"
                    >
                      üî• RESET TO√ÄN B·ªò CU·ªòC B·∫¶U C·ª¨
                    </button>
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
}
