import nodemailer from "nodemailer";
import electionContract from "../config/blockchain.js";
import { sql, poolPromise } from "../config/db.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

// L∆∞u OTP t·∫°m th·ªùi (b·ªô nh·ªõ, production n√™n d√πng DB/Redis)
const otpStore = {};

// G·ª≠i OTP x√°c th·ª±c email khi ƒëƒÉng k√Ω c·ª≠ tri
export const sendOtp = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: "Thi·∫øu email" });

  try {
    // T·∫°o OTP 6 s·ªë
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP v·ªõi th·ªùi gian h·∫øt h·∫°n (5 ph√∫t)
    otpStore[email] = {
      otp: otp,
      expiresAt: Date.now() + 5 * 60 * 1000, // 5 ph√∫t
    };

    console.log(`üìß OTP generated for ${email}: ${otp}`); // Debug

    // C·∫•u h√¨nh transporter
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    // G·ª≠i email
    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "M√£ OTP x√°c th·ª±c ƒëƒÉng k√Ω c·ª≠ tri",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; background: #f0fdfa; border-radius: 8px;">
          <h2 style="color: #06b6d4;">üó≥Ô∏è X√°c th·ª±c ƒëƒÉng k√Ω c·ª≠ tri</h2>
          <p style="font-size: 16px;">M√£ OTP c·ªßa b·∫°n l√†:</p>
          <div style="background: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;">
            <h1 style="color: #0e7490; letter-spacing: 8px; font-size: 32px; margin: 0;">${otp}</h1>
          </div>
          <p style="color: #666; font-size: 14px;">‚è±Ô∏è M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <strong>5 ph√∫t</strong>.</p>
          <p style="color: #999; font-size: 12px; margin-top: 30px;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email.</p>
        </div>
      `,
    });

    console.log(`‚úÖ OTP sent successfully to ${email}`);
    res.json({ success: true, message: "ƒê√£ g·ª≠i OTP ƒë·∫øn email" });
  } catch (error) {
    console.error("‚ùå sendOtp error:", error);
    res.status(500).json({ message: "L·ªói g·ª≠i OTP", error: error.message });
  }
};

export const verifyOtp = async (req, res) => {
  const { email, otp, cccd, address } = req.body;

  if (!email || !otp || !cccd || !address) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin x√°c th·ª±c" });
  }

  try {
    // Ki·ªÉm tra OTP c√≥ t·ªìn t·∫°i v√† c√≤n h·∫°n kh√¥ng
    const otpData = otpStore[email];

    if (!otpData) {
      return res.status(400).json({
        success: false,
        message: "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n",
      });
    }

    if (Date.now() > otpData.expiresAt) {
      delete otpStore[email];
      return res.status(400).json({
        success: false,
        message: "OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi",
      });
    }

    if (otpData.otp !== otp) {
      return res.status(400).json({
        success: false,
        message: "OTP kh√¥ng ƒë√∫ng",
      });
    }

    // OTP h·ª£p l·ªá - x√≥a kh·ªèi store
    delete otpStore[email];
    console.log(`‚úÖ OTP verified for ${email}`);

    const pool = await poolPromise;

    // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng k√Ω trong RegisteredVoters ch∆∞a
    const existingVoter = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT * FROM RegisteredVoters WHERE CitizenID = @cccd");

    if (existingVoter.recordset.length > 0) {
      return res.status(400).json({
        success: false,
        message: "CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω l√†m c·ª≠ tri tr∆∞·ªõc ƒë√≥",
      });
    }

    const emp = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT EmployeeID FROM Employees WHERE CitizenID = @cccd");

    if (emp.recordset.length === 0) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng t√¨m th·∫•y EmployeeID cho CCCD n√†y" });
    }

    const employeeid = emp.recordset[0].EmployeeID;

    // L∆∞u v√†o RegisteredVoters
    await pool
      .request()
      .input("employeeid", sql.Int, employeeid)
      .input("cccd", sql.VarChar, cccd)
      .input("address", sql.VarChar, address).query(`
    INSERT INTO RegisteredVoters (EmployeeID, CitizenID, WalletAddress, RegisteredAt, IsApproved)
    VALUES (@employeeid, @cccd, @address, GETDATE(), 0)
  `);

    console.log(`‚úÖ Voter registered: CCCD=${cccd}, Email=${email}`);

    // Ghi nh·∫≠n tr√™n blockchain
    try {
      // ‚ùå L∆∞u √Ω: C·∫ßn wallet address th·ª±c t·ª´ MetaMask, kh√¥ng ph·∫£i address t·ª´ form
      console.log("‚ö†Ô∏è Backend kh√¥ng th·ªÉ g·ªçi registerVoter() tr·ª±c ti·∫øp");
      console.log(
        "‚ö†Ô∏è User c·∫ßn t·ª± g·ªçi registerVoter() t·ª´ frontend v·ªõi MetaMask"
      );

      // TODO: Frontend c·∫ßn t√≠ch h·ª£p MetaMask v√† g·ªçi contract.registerVoter()
      console.log(
        "‚úÖ Database registration successful - blockchain pending user action"
      );
    } catch (bcErr) {
      console.error("‚ö†Ô∏è Blockchain error (non-critical):", bcErr);
    }

    return res.json({
      success: true,
      message: "X√°c th·ª±c OTP th√†nh c√¥ng, ƒë√£ ƒëƒÉng k√Ω c·ª≠ tri!",
    });
  } catch (error) {
    console.error("‚ùå verifyOtp error:", error);
    res.status(500).json({
      message: "L·ªói x√°c th·ª±c OTP",
      error: error.message,
    });
  }
};

// ‚úÖ Ki·ªÉm tra CCCD v√† l·∫•y email t·ª´ Users
export const checkCccd = async (req, res) => {
  const { cccd } = req.body;

  if (!cccd) {
    return res.status(400).json({ message: "Thi·∫øu CCCD" });
  }

  try {
    const pool = await poolPromise;

    // B∆Ø·ªöC 1: Ki·ªÉm tra CCCD c√≥ trong Employees kh√¥ng (x√°c nh·∫≠n l√† nh√¢n vi√™n)
    const empResult = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT * FROM Employees WHERE CitizenID = @cccd");

    if (empResult.recordset.length === 0) {
      return res.status(403).json({
        message:
          "B·∫°n kh√¥ng ph·∫£i l√† nh√¢n vi√™n trong c√¥ng ty, kh√¥ng ƒë∆∞·ª£c tham gia b·ªè phi·∫øu.",
      });
    }

    console.log(`‚úÖ Employee found: CCCD=${cccd}`);

    // B∆Ø·ªöC 2: Ki·ªÉm tra CCCD c√≥ trong Users kh√¥ng (ƒë√£ t·∫°o t√†i kho·∫£n ch∆∞a)
    const userResult = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT * FROM Users WHERE CCCD = @cccd");

    if (userResult.recordset.length === 0) {
      return res.status(400).json({
        exists: false,
        message:
          "CCCD ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω t√†i kho·∫£n trong h·ªá th·ªëng Users. Vui l√≤ng ƒëƒÉng k√Ω t√†i kho·∫£n tr∆∞·ªõc.",
      });
    }

    const user = userResult.recordset[0];
    console.log(`‚úÖ User found: Email=${user.Email}`);

    // B∆Ø·ªöC 3: Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω c·ª≠ tri (RegisteredVoters) ch∆∞a
    const voterResult = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT * FROM RegisteredVoters WHERE CitizenID  = @cccd");

    if (voterResult.recordset.length > 0) {
      return res.json({
        exists: true,
        message: "CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω l√†m c·ª≠ tri",
      });
    }

    // B∆Ø·ªöC 4: Ch∆∞a ƒëƒÉng k√Ω c·ª≠ tri ‚Üí Tr·∫£ v·ªÅ email t·ª´ Users ƒë·ªÉ g·ª≠i OTP
    return res.json({
      exists: false,
      email: user.Email, // ‚úÖ L·∫•y email t·ª´ b·∫£ng Users
      message: "CCCD h·ª£p l·ªá, s·∫µn s√†ng ƒëƒÉng k√Ω c·ª≠ tri",
    });
  } catch (error) {
    console.error("‚ùå checkCccd error:", error);
    res.status(500).json({
      message: "L·ªói server",
      error: error.message,
    });
  }
};

export const registerUser = async (req, res) => {
  const { name, email, cccd, password } = req.body;

  try {
    const pool = await poolPromise;

    // Ki·ªÉm tra CCCD c√≥ ph·∫£i nh√¢n vi√™n kh√¥ng
    const empCheck = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT * FROM Employees WHERE CitizenID = @cccd");

    if (empCheck.recordset.length === 0) {
      return res.status(403).json({
        message: "CCCD kh√¥ng thu·ªôc nh√¢n vi√™n c√¥ng ty",
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await pool
      .request()
      .input("email", sql.VarChar, email)
      .query("SELECT * FROM Users WHERE Email = @email");

    if (existingUser.recordset.length > 0) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
    }

    // Ki·ªÉm tra CCCD ƒë√£ ƒëƒÉng k√Ω ch∆∞a
    const existingCccd = await pool
      .request()
      .input("cccd", sql.VarChar, cccd)
      .query("SELECT * FROM Users WHERE CCCD = @cccd");

    if (existingCccd.recordset.length > 0) {
      return res.status(400).json({ message: "CCCD ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Th√™m user m·ªõi v√†o DB
    await pool
      .request()
      .input("name", sql.NVarChar, name)
      .input("email", sql.VarChar, email)
      .input("cccd", sql.VarChar, cccd)
      .input("password", sql.VarChar, hashedPassword).query(`
        INSERT INTO Users (Name, Email, CCCD, Password)
        VALUES (@name, @email, @cccd, @password)
      `);

    console.log(`‚úÖ User registered: ${email}`);
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå registerUser error:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

export const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const pool = await poolPromise;

    const result = await pool
      .request()
      .input("email", sql.VarChar, email)
      .query("SELECT * FROM Users WHERE Email = @email");

    const user = result.recordset[0];

    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const isMatch = await bcrypt.compare(password, user.Password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign(
      { id: user.ID, email: user.Email, cccd: user.CCCD },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log(`‚úÖ User logged in: ${email}`);
    res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", token });
  } catch (error) {
    console.error("‚ùå loginUser error:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
